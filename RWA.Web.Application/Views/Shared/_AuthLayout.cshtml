@{
	Layout = null;
}

<!DOCTYPE html>
<html lang="fr">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>@ViewData["Title"] - RWA Application</title>

	<link rel="stylesheet" href="~/RWA.Web.Application.styles.css" asp-append-version="true" />
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
	@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Env

	<!-- Bootstrap CSS - served by Vite in dev, copied to wwwroot in production -->
	<link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.min.css" />
	
	@functions {
		private Microsoft.AspNetCore.Html.IHtmlContent RenderViteCss(string entry)
		{
			// In development rely on vite dev server via vite-href
					if (Env.IsDevelopment())
					{
						// Emit explicit dev server tags so the Vite client and entry script load when running locally.
						// Vite dev server serves from the `root` (Assets), so the entry is available at /main.ts.
						var devTags = "<script type=\"module\" src=\"https://localhost:5173/@vite/client\"></script>" +
									  "\n<script type=\"module\" src=\"https://localhost:5173/main.ts\"></script>";
						return new Microsoft.AspNetCore.Html.HtmlString(devTags);
					}

			var manifestPath = System.IO.Path.Combine(Env.WebRootPath ?? "wwwroot", ".vite", "manifest.json");
			if (!System.IO.File.Exists(manifestPath)) return Microsoft.AspNetCore.Html.HtmlString.Empty;

			var json = System.IO.File.ReadAllText(manifestPath);
			using var doc = System.Text.Json.JsonDocument.Parse(json);
			var root = doc.RootElement;

			// Try several possible keys that Vite might use in the manifest
			string[] keysToTry = new[] { entry, $"./{entry}", entry.Replace("Assets/", "./Assets/"), entry.Replace("\\", "/") };
			foreach (var k in keysToTry)
			{
				if (root.TryGetProperty(k, out var node))
				{
					var sb = new System.Text.StringBuilder();
					if (node.TryGetProperty("css", out var cssArr) && cssArr.ValueKind == System.Text.Json.JsonValueKind.Array)
					{
						foreach (var css in cssArr.EnumerateArray())
						{
							var href = "/" + css.GetString().TrimStart('/');
							sb.Append($"<link rel=\"stylesheet\" href=\"{href}\" />\n");
						}
					}
					return new Microsoft.AspNetCore.Html.HtmlString(sb.ToString());
				}
			}

			return Microsoft.AspNetCore.Html.HtmlString.Empty;
		}
	}

	@RenderViteCss("Assets/main.ts")
	
	<!-- Login specific styles -->
	<style>
		body {
			background: linear-gradient(135deg, #e8e3ff 0%, #f3f0ff 50%, #e0d9ff 100%);
			min-height: 100vh;
			display: flex;
			align-items: center;
			justify-content: center;
			font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
		}
		
		.login-container {
			background: rgba(255, 255, 255, 0.95);
			backdrop-filter: blur(10px);
			border-radius: 20px;
			box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
			padding: 3rem;
			min-width: 400px;
			max-width: 450px;
			text-align: center;
		}
		
		.login-logo {
			max-height: 60px;
			margin-bottom: 1.5rem;
		}
		
		.login-title {
			color: #2c3e50;
			font-size: 2rem;
			font-weight: 700;
			margin-bottom: 0.5rem;
		}
		
		.login-subtitle {
			color: #6c757d;
			font-size: 1rem;
			margin-bottom: 2rem;
		}
		
		.form-group {
			margin-bottom: 1.5rem;
			text-align: left;
		}
		
		.form-label {
			color: #2c3e50;
			font-weight: 600;
			margin-bottom: 0.5rem;
			display: block;
		}
		
		.form-control {
			border: 2px solid #e0e6ed;
			border-radius: 10px;
			padding: 0.75rem 1rem;
			font-size: 1rem;
			transition: all 0.3s ease;
			width: 100%;
		}
		
		.form-control:focus {
			border-color: #667eea;
			box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
			outline: none;
		}
		
		.btn-login {
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			border: none;
			border-radius: 10px;
			color: white;
			font-size: 1.1rem;
			font-weight: 600;
			padding: 0.75rem 2rem;
			width: 100%;
			transition: all 0.3s ease;
			margin-top: 1rem;
		}
		
		.btn-login:hover {
			transform: translateY(-2px);
			box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
			color: white;
		}
		
		.text-danger {
			color: #e74c3c !important;
			font-size: 0.875rem;
			margin-top: 0.5rem;
		}
		
		.alert-error {
			background-color: #f8d7da;
			border: 1px solid #f5c6cb;
			border-radius: 10px;
			color: #721c24;
			padding: 0.75rem;
			margin-bottom: 1.5rem;
		}
	</style>
</head>
<body>
	@RenderBody()

	<!-- jQuery and Bootstrap JS -->
	<script src="/lib/jquery/dist/jquery.min.js"></script>
	<script src="/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
	@await RenderSectionAsync("Scripts", required: false)
</body>
</html>
