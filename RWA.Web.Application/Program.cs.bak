using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using RWA.Web.Application.Models;
using RWA.Web.Application.Services.Ldap;
using Vite.AspNetCore;
using RWA.Web.Application.Hubs;
using RWA.Web.Application.Middleware;
using System.Linq.Dynamic.Core;

namespace RWA.Web.Application
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Configure Dynamic LINQ to be case-insensitive
            ParsingConfig.Default.IsCaseSensitive = false;

            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.
            builder.Services.AddControllersWithViews().AddJsonOptions(options =>
            {
                options.JsonSerializerOptions.PropertyNameCaseInsensitive = true;
            });
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen();
            builder.Services.AddSignalR();
            
            // Add response caching to optimize status endpoint performance
            builder.Services.AddResponseCaching();
            builder.Services.AddMemoryCache();

            builder.Services.AddViteServices(options =>
            {
                options.Server.AutoRun = true;
                options.Server.Https = true;
            });

            builder.Services.Configure<LdapSettings>(builder.Configuration.GetSection("Ldap"));
            // Bind workflow status mapping options so advancement/error rules are configurable at runtime
            builder.Services.Configure<WorkflowStatusMappingOptions>(builder.Configuration.GetSection("WorkflowStatusMapping"));
            // Bind Excel column mappings options for seeding process
            builder.Services.Configure<ExcelColumnMappings>(builder.Configuration.GetSection("ExcelColumnMappings"));
            // Bind workflow step names mapping
            builder.Services.Configure<WorkflowStepNamesMapping>(builder.Configuration.GetSection("WorkflowStepNamesMapping"));
            builder.Services.AddScoped<ILdapAuthService, LdapAuthService>();
            // Validation services - use FluentValidation-based service
            builder.Services.AddSingleton<Services.Validation.FluentValidationService>();

            // Register generic Fluent validators for WorkflowStep
            builder.Services.AddTransient<FluentValidation.IValidator<RWA.Web.Application.Models.WorkflowStep>, RWA.Web.Application.Services.Validation.Fluent.UploadTemplateFluentValidator>();
            builder.Services.AddTransient<FluentValidation.IValidator<RWA.Web.Application.Models.WorkflowStep>, RWA.Web.Application.Services.Validation.Fluent.MandatoryColumnsFluentValidator>();
            builder.Services.AddTransient<FluentValidation.IValidator<RWA.Web.Application.Models.WorkflowStep>, RWA.Web.Application.Services.Validation.Fluent.RwaCategoryMappingFluentValidator>();
            builder.Services.AddTransient<FluentValidation.IValidator<RWA.Web.Application.Models.HecateInventaireNormalise>, RWA.Web.Application.Services.Validation.ObligationValidator>();

            builder.Services.AddSingleton<Services.Validation.IValidatorsFactory, Services.Validation.ValidatorsFactory>();
            builder.Services.AddScoped<Services.ExcelManagementService.Export.ExcelManagementServiceFactory>();
            builder.Services.AddScoped<Services.ExcelManagementService.Import.ExcelImportManagemenServiceFactory>();

            if (builder.Environment.IsDevelopment())
            {
                builder.Services.AddScoped<Services.Seeding.DatabaseSeederService>();
            }

            builder.Services.AddAuthentication("MyCookieAuth")
                .AddCookie("MyCookieAuth", options =>
                {
                    options.LoginPath = "/Account/Login";
                    options.AccessDeniedPath = "/Account/Login";
                    options.LogoutPath = "/Account/Logout";
                    options.ExpireTimeSpan = TimeSpan.FromMinutes(30);
                    options.SlidingExpiration = true;
                });

            builder.Services.AddAuthorization();

            // Add caching for sessions
            builder.Services.AddDistributedMemoryCache();
            builder.Services.AddSession(options =>
            {
                options.IdleTimeout = TimeSpan.FromMinutes(30);
                options.Cookie.HttpOnly = true;
                options.Cookie.IsEssential = true;
                options.Cookie.SameSite = SameSiteMode.Strict;
            });

            builder.Services.AddHttpContextAccessor();

            // Workflow services
            builder.Services.AddSingleton<Services.Workflow.IWorkflowDbProvider, Services.Workflow.EfWorkflowDbProvider>();
            builder.Services.AddSingleton<Services.Workflow.IInventoryImportService, Services.Workflow.InventoryImportService>();
            builder.Services.AddSingleton<Services.Workflow.IWorkflowEventPublisher, Services.Workflow.WorkflowEventPublisher>();
            builder.Services.AddSingleton<Services.Workflow.WorkflowStateMachine>();
            builder.Services.AddSingleton<Services.Workflow.IWorkflowStateActions, Services.Workflow.WorkflowStateActions>();
            builder.Services.AddSingleton<Services.Workflow.IWorkflowOrchestrator, Services.Workflow.WorkflowOrchestrator>();
            builder.Services.AddScoped<Services.Workflow.IExcelExportService, Services.Workflow.ExcelExportService>();
            
            // Configure DbContext: Production uses SQL Server, Development uses in-memory via middleware
            if (builder.Environment.IsDevelopment())
            {
                // In development, use in-memory database (configured by middleware)
                builder.Services.AddDbContextFactory<RwaContext>(options =>
                    options.UseInMemoryDatabase("RWA_Development_DB"));
            }
            else
            {
                // In production, use SQL Server
                builder.Services.AddDbContext<RwaContext>(options =>
                    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
            }

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            app.UseSwagger();
            app.UseSwaggerUI();

            app.UseHttpsRedirection();
            
            // Vite development server MUST come BEFORE static files
            if (app.Environment.IsDevelopment())
            {
                app.UseWebSockets();
                // Use Vite Dev Server as middleware.
                app.UseViteDevelopmentServer(true);
            }
            
            app.UseStaticFiles();
            
            // Add response caching middleware
            app.UseResponseCaching();

            // Add session middleware for workflow orchestrator persistence
            app.UseSession();
            
            // Add database seeding middleware (development only)
            if (app.Environment.IsDevelopment())
            {
                app.UseDatabaseSeeding();
            }

            app.UseRouting();
            app.UseAuthentication();
            app.UseAuthorization();

            app.MapHub<WorkflowHub>("/workflowHub");
            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=Account}/{action=Login}/{id?}");

            app.Run();
        }
    }
}

